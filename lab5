// Universidad del Valle
// Digital 2
// Ana y Dayrin
// Contador binario con leds e interrupciones

/************************** Dashboard ***********************************/
https://io.adafruit.com/AnaGramajo/dashboards/lab5

#include <Arduino.h>

/************************** Configuración ***********************************/

#include "config.h"

portMUX_TYPE mux = portMUX_INITIALIZER_UNLOCKED

#define IO_USERNAME  "AnaGramajo"
#define IO_KEY       "aio_NNfr795dzM38AZHZS6XlHZQFxViV"

// Variables globales

#define B 2 // Botón
#define P1 34 // Potenciómetro 1
#define P2 35 // Potenciómetro 2

// Pines compartidos para los segmentos a-g
int segA = 18;
int segB = 19;
int segC = 21;
int segD = 23;
int segE = 22;
int segF = 5;
int segG = 32;
int dp = 26;

// Pines para seleccionar el display activo
int display1 = 25;  // Controla el primer display
int display2 = 14; // Controla el segundo display

volatile bool b_pressed = false;
int pot1 = 0;
int pot2 = 0;
int mult = 0;

// Prototipos de funciones
void enviar_p1(int p);
void enviar_p2(int val);
void mostrarNumero(int numero); 

// set up de los feeds
AdafruitIO_Feed *pot_1 = io.feed("p1");
AdafruitIO_Feed *pot_2 = io.feed("p2");
AdafruitIO_Feed *mult_ = io.feed("m");

// Interrupción 
void IRAM_ATTR B_isr() {
  portENTER_CRITICAL_ISR(&mux);
    b_pressed = true;
  portEXIT_CRITICAL_ISR(&mux);
}

void setup() {

  // inicia la conexión serial
  Serial.begin(115200);

  while(! Serial);
  Serial.print("Connecting to Adafruit IO");
  // conectarse a io.adafruit.com
  io.connect();

  // esperar a que se conecte
  while(io.status() < AIO_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  
  Serial.println();
  Serial.println(io.statusText());

  pinMode(B, INPUT_PULLDOWN);
  attachInterrupt(B, B_isr, RISING);

// Configuración de pines para los segmentos
  pinMode(segA, OUTPUT);
  pinMode(segB, OUTPUT);
  pinMode(segC, OUTPUT);
  pinMode(segD, OUTPUT);
  pinMode(segE, OUTPUT);
  pinMode(segF, OUTPUT);
  pinMode(segG, OUTPUT);

  // Configuración de pines para seleccionar el display
  pinMode(display1, OUTPUT);
  pinMode(display2, OUTPUT);

  pinMode(P1, INPUT);
  pinMode(P2, INPUT);
}

void mostrarNumero(int numero) {
  // Limpia el display antes de mostrar el número
  limpiarDisplay();

void loop() {


  unsigned int valorPot1 = analogRead(P1);
  unsigned int valorPot2 = analogRead(P2);

  // Convertir los valores de los potenciómetros a números hexadecimales
  unsigned int numero1 = map(valorPot1, 0, 4095, 0, 15);  // Valor entre 0 y F
  unsigned int numero2 = map(valorPot2, 0, 4095, 0, 15);  // Valor entre 0 y F

  // Encender el primer display y mostrar el número correspondiente
  digitalWrite(display1, HIGH);   // Encender el display 1
  digitalWrite(display2, LOW);    // Apagar el display 2
  mostrarNumero(numero1);         // Mostrar el número en el primer display
  delay(5);

  // Encender el segundo display y mostrar el número correspondiente
  digitalWrite(display1, LOW);    // Apagar el display 1
  digitalWrite(display2, HIGH);   // Encender el display 
  mostrarNumero(numero2);         // Mostrar el número en el segundo display
  delay(5);

  io.run();
  
  if (b_pressed) {
    // se leen los potenciómetros y se escalan para obtener valores de 0 a 15
    pot1 = map(analogRead(P1), 0, 1023, 0, 15);
    pot2 = map(analogRead(P2), 0, 1023, 0, 15);
    //Funciones para enviar los datos al dashboard
    enviar_p1(pot1);
    enviar_p2(pot2);
    // Multiplicacion
    mult = pot1*pot2;
    Serial.print("sending -> ");
    Serial.println(mult);
    mult_->save(mult);

    b_pressed = false;
  }

  delay(3000); 
}

// Otras funciones

void enviar_p1(int p) {
  Serial.print("sending -> ");
  Serial.println(p);
  pot_1->save(p);
}

void enviar_p2(int val) {
  Serial.print("sending -> ");
  Serial.println(val);
  pot_2->save(val);
}
  // Aquí defines qué segmentos encender según el número
  switch (numero) {
    case 0:
      digitalWrite(segA, HIGH);
      digitalWrite(segB, HIGH);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, HIGH);
      digitalWrite(segE, HIGH);
      digitalWrite(segF, HIGH);
      digitalWrite(segG, LOW);
      break;
    case 1:
      digitalWrite(segA, LOW);
      digitalWrite(segB, HIGH);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, LOW);
      digitalWrite(segE, LOW);
      digitalWrite(segF, LOW);
      digitalWrite(segG, LOW);
      break;
    case 2:
      digitalWrite(segA, HIGH);
      digitalWrite(segB, HIGH);
      digitalWrite(segC, LOW);
      digitalWrite(segD, HIGH);
      digitalWrite(segE, HIGH);
      digitalWrite(segF, LOW);
      digitalWrite(segG, HIGH);
      break;
    case 3:
      digitalWrite(segA, HIGH);
      digitalWrite(segB, HIGH);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, HIGH);
      digitalWrite(segE, LOW);
      digitalWrite(segF, LOW);
      digitalWrite(segG, HIGH);
      break;
    case 4:
      digitalWrite(segA, LOW);
      digitalWrite(segB, HIGH);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, LOW);
      digitalWrite(segE, LOW);
      digitalWrite(segF, HIGH);
      digitalWrite(segG, HIGH);
      break;
    case 5:
      digitalWrite(segA, HIGH);
      digitalWrite(segB, LOW);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, HIGH);
      digitalWrite(segE, LOW);
      digitalWrite(segF, HIGH);
      digitalWrite(segG, HIGH);
      break;
    case 6:
      digitalWrite(segA, HIGH);
      digitalWrite(segB, LOW);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, HIGH);
      digitalWrite(segE, HIGH);
      digitalWrite(segF, HIGH);
      digitalWrite(segG, HIGH);
      break;
    case 7:
      digitalWrite(segA, HIGH);
      digitalWrite(segB, HIGH);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, LOW);
      digitalWrite(segE, LOW);
      digitalWrite(segF, HIGH);
      digitalWrite(segG, LOW);
      break;
    case 8:
      digitalWrite(segA, HIGH);
      digitalWrite(segB, HIGH);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, HIGH);
      digitalWrite(segE, HIGH);
      digitalWrite(segF, HIGH);
      digitalWrite(segG, HIGH);
      break;
    case 9:
      digitalWrite(segA, HIGH);
      digitalWrite(segB, HIGH);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, LOW);
      digitalWrite(segE, LOW);
      digitalWrite(segF, HIGH);
      digitalWrite(segG, HIGH);
      break;
    case 10:  // A
      digitalWrite(segA, HIGH);
      digitalWrite(segB, HIGH);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, LOW);
      digitalWrite(segE, HIGH);
      digitalWrite(segF, HIGH);
      digitalWrite(segG, HIGH);
      break;
    case 11:  // B
      digitalWrite(segA, HIGH);
      digitalWrite(segB, HIGH);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, HIGH);
      digitalWrite(segE, HIGH);
      digitalWrite(segF, HIGH);
      digitalWrite(segG, HIGH);
      break;
    case 12:  // C
      digitalWrite(segA, HIGH);
      digitalWrite(segB, LOW);
      digitalWrite(segC, LOW);
      digitalWrite(segD, HIGH);
      digitalWrite(segE, HIGH);
      digitalWrite(segF, HIGH);
      digitalWrite(segG, LOW);
      break;
    case 13:  // D
      digitalWrite(segA, HIGH);
      digitalWrite(segB, HIGH);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, HIGH);
      digitalWrite(segE, HIGH);
      digitalWrite(segF, HIGH);
      digitalWrite(segG, LOW);
      break;
    case 14:  // E
      digitalWrite(segA, HIGH);
      digitalWrite(segB, LOW);
      digitalWrite(segC, LOW);
      digitalWrite(segD, HIGH);
      digitalWrite(segE, HIGH);
      digitalWrite(segF, HIGH);
      digitalWrite(segG, HIGH);
      break;
    case 15:  // F
      digitalWrite(segA, HIGH);
      digitalWrite(segB, LOW);
      digitalWrite(segC, LOW);
      digitalWrite(segD, LOW);
      digitalWrite(segE, HIGH);
      digitalWrite(segF, HIGH);
      digitalWrite(segG, HIGH);
      break;
  }
}
